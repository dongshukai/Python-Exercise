<?xml version='1.0' encoding='utf-8'?>
<openerp>
  <data noupdate="1">
      <record model="hr.payroll.function" id="function_sick_leave_deduction">
          <field name="name">病假扣除公式</field>
          <field name="code">func_sick_leave_deduction</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">扣除公式</field>
          <field name="python_code">def func_sick_leave_deduction(base_salary, healing_days, in_service_time, sick_leave_days):
              #参数解释: base_salary-基本工资 healing_days-医疗期 in_service_time-工龄 sick_leave_days-病假天数
              if healing_days &lt;= 182 and in_service_time &lt;= 2:
                  return base_salary / 21.75 * sick_leave_days * 0.4
              if healing_days &lt;= 182 and in_service_time &lt;= 4:
                  return base_salary / 21.75 * sick_leave_days * 0.3
              if healing_days &lt;= 182 and in_service_time &lt;= 8:
                  return base_salary / 21.75 * sick_leave_days * 0.2
              if healing_days &gt;= 182 and in_service_time &lt;= 1:
                  return base_salary / 21.75 * sick_leave_days * 0.6
              if healing_days &gt;= 182 and in_service_time &lt; 3:
                  return base_salary / 21.75 * sick_leave_days * 0.5
              if healing_days &gt;= 182 and in_service_time &gt;= 3:
                  return base_salary / 21.75 * sick_leave_days * 0.4
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;病假扣除公式&lt;/p&gt;
              &lt;p&gt;格式：病假扣除(基本工资,医疗期,工龄,病假天数)&lt;/p&gt;
              &lt;p&gt;返回：病假扣除数&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="function_income_tax_domestic">
          <field name="name">个人所得税公式</field>
          <field name="code">func_income_tax_domestic</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def func_income_tax_domestic(taxable_salary):
              #参数解释: taxable_salary-计税工资
              if taxable_salary &lt;= 3500:
                  return 0
              else:
                  base = taxable_salary - 3500
                  if base &lt;= 1500:
                      return base*0.03
                  if base &gt; 1500 and base &lt;= 4500:
                      return base*0.1 - 105
                  if base &gt; 4500 and base &lt;= 9000:
                      return base * 0.2 - 555
                  if base &gt; 9000 and base &lt;= 35000:
                      return base * 0.25 - 1005
                  if base &gt; 35000 and base &lt;= 55000:
                      return base * 0.3 - 2755
                  if base &gt; 55000 and base &lt;= 80000:
                      return base * 0.35 - 5505
                  if base &gt; 80000:
                      return base * 0.45 - 13505
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;个人所得税(中国籍)公式&lt;/p&gt;
              &lt;p&gt;格式: 个人所得税(税前工资)&lt;/p&gt;
              &lt;p&gt;返回: 个人所得税税金&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="function_income_tax_foreign">
          <field name="name">外籍个人所得税公式</field>
          <field name="code">func_income_tax_foreign</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def func_income_tax_foreign(taxable_salary):
              #参数解释: taxable_salary-计税工资
              if taxable_salary &lt;= 4800:
                  return 0
              else:
                  base = taxable_salary - 4800
                  if base &lt;= 1500:
                      return base*0.03
                  if base &gt; 1500 and base &lt;= 4500:
                      return base*0.1 - 105
                  if base &gt; 4500 and base &lt;= 9000:
                      return base * 0.2 - 555
                  if base &gt; 9000 and base &lt;= 35000:
                      return base * 0.25 - 1005
                  if base &gt; 35000 and base &lt;= 55000:
                      return base * 0.3 - 2755
                  if base &gt; 55000 and base &lt;= 80000:
                      return base * 0.35 - 5505
                  if base &gt; 80000:
                      return base * 0.45 - 13505
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;外籍个人所得税公式&lt;/p&gt;
              &lt;p&gt;格式: 外籍个人所得税(税前工资)&lt;/p&gt;
              &lt;p&gt;返回: 外籍员工个人所得税税金&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="function_annual_bonus_tax_domestic">
          <field name="name">年终奖税公式</field>
          <field name="code">func_annual_bonus_tax_domestic</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def func_annual_bonus_tax_domestic(annual_bonus,taxable_salary):
              #参数解释: annual_bonus-年终奖  taxable_salary-计税工资
              base = annual_bonus
              compare = annual_bonus / 12.0
              if annual_bonus &lt;= 0:
                  return 0
              if taxable_salary &lt; 3500:
                  if taxable_salary == 0:
                      taxable_salary = 3500
                  compare = (annual_bonus - (3500 - taxable_salary)) / 12.0
                  base = annual_bonus - (3500 - taxable_salary)
              if base &lt;= 0:
                  return 0
              if compare &lt;= 1500:
                  return base*0.03
              if compare &gt;1500 and compare &lt;= 4500:
                  return base*0.1 - 105
              if compare &gt;4500 and compare &lt;= 9000:
                  return base * 0.2 - 555
              if compare &gt; 9000 and compare &lt;= 35000:
                  return base * 0.25 - 1005
              if compare &gt; 35000 and compare &lt;= 55000:
                  return base * 0.3 - 2755
              if compare &gt; 55000 and compare &lt;= 80000:
                  return base * 0.35 - 5505
              if compare &gt; 80000:
                  return base * 0.45 - 13505
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;年终奖税计算公式&lt;/p&gt;
              &lt;p&gt;格式: 年终奖税(年终奖,计税工资)&lt;/p&gt;
              &lt;p&gt;返回: 年终奖奖金&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_BackwardAnnualBonusIIT">
          <field name="name">年终奖倒推应税公式</field>
          <field name="code">F_BackwardAnnualBonusIIT</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def F_BackwardAnnualBonusIIT(after_tax, taxable_salary):
              #参数解释: after_tax->税后金额(奖金扣除税金), taxable_salary-计税工资
              #返回: 根据奖金税金倒算出税前
              #参数解释: annual_bonus-年终奖  taxable_salary-计税工资
              if taxable_salary &gt;= 3500:
                  return min([after_tax/0.97, (after_tax-105)/0.9, (after_tax-555)/0.8, (after_tax-1005)/0.75, (after_tax-2755)/0.7, (after_tax-5505)/0.65, (after_tax-13505)/0.55])
              else:
                  return min([(after_tax - (3500-taxable_salary)*0.03)/0.97, (after_tax - 105 - (3500-taxable_salary)*0.1)/0.9, (after_tax - 555 - (3500-taxable_salary)*0.2)/0.8, (after_tax - 1005 - (3500-taxable_salary)*0.25)/0.75, (after_tax - 2755 - (3500-taxable_salary)*0.3)/0.7, (after_tax - 5505 - (3500-taxable_salary)*0.35)/0.65, (after_tax - 13505 - (3500-taxable_salary)*0.45)/0.55])

         </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;根据年终奖税后(奖金-奖金税)倒推出年终奖奖金&lt;/p&gt;
              &lt;p&gt;格式: 年终奖税倒算(税后金额,计税工资)&lt;/p&gt;
              &lt;p&gt;返回: 年终奖金额&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="function_annual_bonus_tax_foreign">
          <field name="name">外籍员工年终奖税公式</field>
          <field name="code">func_annual_bonus_tax_foreign</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def func_annual_bonus_tax_foreign(annual_bonus,taxable_salary):
              #参数解释: annual_bonus-年终奖  taxable_salary-计税工资
              base = annual_bonus
              compare = annual_bonus / 12.0
              if taxable_salary &lt;= 0:
                  return 0
              if taxable_salary &lt; 4800:
                  compare = (annual_bonus - (4800 - taxable_salary)) / 12.0
                  base = annual_bonus - (4800 - taxable_salary)
              if base &lt;= 0:
                  return 0
              if compare &lt;= 1500:
                  return base*0.03
              if compare &gt;1500 and compare &lt;= 4500:
                  return base*0.1 - 105
              if compare &gt;4500 and compare &lt;= 9000:
                  return base * 0.2 - 555
              if compare &gt; 9000 and compare &lt;= 35000:
                  return base * 0.25 - 1005
              if compare &gt; 35000 and compare &lt;= 55000:
                  return base * 0.3 - 2755
              if compare &gt; 55000 and compare &lt;= 80000:
                  return base * 0.35 - 5505
              if compare &gt; 80000:
                  return base * 0.45 - 13505
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;根据年终奖税后(奖金-奖金税)倒推出年终奖奖金&lt;/p&gt;
              &lt;p&gt;格式: 年终奖税倒算(税后金额,计税工资)&lt;/p&gt;
              &lt;p&gt;返回: 年终奖金额&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_ServiceChargeIIT">
          <field name="name">劳务报酬个税公式</field>
          <field name="code">F_ServiceChargeIIT</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def F_ServiceChargeIIT(labor_income):
              #参数解释: labor_income ->  劳务报酬
              if labor_income &lt;4000:
                  return (labor_income-800) * 0.2
              if labor_income &gt;=4000 and labor_income &lt; 20000:
                  return labor_income * 0.8 * 0.2
              if labor_income &gt;=20000 and labor_income &lt; 50000:
                  return labor_income * 0.8 * 0.3 - 2000
              if labor_income &gt;=50000:
                  return labor_income * 0.8 * 0.4 - 7000
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;输入：工资项或者工资项加运算符，譬如（劳务费）；&lt;/p&gt;
              &lt;p&gt;输出：根据个税算法计算出输入的薪资项的个人所得税。&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_ BackwardServiceChargeIIT">
          <field name="name">劳务报酬倒推应税</field>
          <field name="code">F_ BackwardServiceChargeIIT</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def F_ BackwardServiceChargeIIT(labor_income_after_tax):
              if labor_income_after_tax &lt;= 3360:
                  return (labor_income_after_tax - 800) / (1-0.2)
              if labor_income_after_tax &gt; 3360 and labor_income_after_tax &lt;= 21000:
                  return (labor_income_after_tax - 0) * (1 - 0.2) / (1 - 0.2 * (1 - 0.2))
              if labor_income_after_tax &gt; 21000 and labor_income_after_tax &lt;= 49500:
                  return (labor_income_after_tax - 2000) * (1 - 0.2) / (1 - 0.3 * (1 - 0.2))
              if labor_income_after_tax &gt; 49500:
                  return (labor_income_after_tax - 7000) * (1 - 0.2) / (1 - 0.4 * (1 - 0.2))
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;输入：薪资项或薪资项组合，输入税后金额, 即税前扣除税金后的金额&lt;/p&gt;
              &lt;p&gt;输出：根据倒推税算法计算出劳务报酬实际应税工资。&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_IncidentalIncomeIIT">
          <field name="name">偶然所得个税公式</field>
          <field name="code">F_IncidentalIncomeIIT</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def F_IncidentalIncomeIIT(incidental_income):
              return incidental_income * 0.2
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;输入：工资项或者工资项加运算符，譬如（稿酬1+稿酬2+彩票奖金）；&lt;/p&gt;
              &lt;p&gt;输出：根据个税算法计算出输入的薪资项的个人所得税。&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_StockOptionIncomeIIT">
          <field name="name">股票期权个税公式</field>
          <field name="code">F_StockOptionIncomeIIT</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def F_StockOptionIncomeIIT(market_price, exercise_price, shares, months):
              if months &gt; 12:
                  months = 12
              taxable = (market_price - exercise_price) * shares / months
              if taxable &lt;= 500:
                  return taxable * 0.05
              if taxable &gt; 500 and taxable &lt;= 2000:
                  return taxable * 0.1 - 25
              if taxable &gt; 2000 and taxable &lt;= 5000:
                  return taxable * 0.15 - 125
              if taxable &gt; 5000 and taxable &lt;= 20000:
                  return taxable * 0.2 - 375
              if taxable &gt; 20000 and taxable &lt;= 40000:
                  return taxable * 0.25 - 1375
              if taxable &gt; 40000 and taxable &lt;= 60000:
                  return taxable * 0.3 - 3375
              if taxable &gt; 60000 and taxable &lt;= 80000:
                  return taxable * 0.35 - 6375
              if taxable &gt; 80000 and taxable &lt;= 100000:
                  return taxable * 0.4 - 10375
              if taxable &gt; 100000:
                  return taxable * 0.45 - 15375
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;输入：工资项或者工资项加运算符，譬如（股票期权份数）；&lt;/p&gt;
              &lt;p&gt;输出：根据个税算法计算出输入的薪资项的个人所得税&lt;/p&gt;
          </field>
      </record>


      <record model="hr.payroll.function" id="F_SeverancePayIIT">
          <field name="name">离职补偿金个税公式</field>
          <field name="code">F_SeverancePayIIT</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def F_SeverancePayIIT(SeverancePay, market_average, work_age):
              if SeverancePay &lt;= 3 * market_average:
                  return 0
              base = (SeverancePay - 3 * market_average) / work_age - 2000
              if base &lt; 1500:
                  return base*0.03 * work_age
              if base &gt;= 1500 and base &lt; 4500:
                  return (base*0.1 - 105) * work_age
              if base &gt;= 4500 and base &lt; 9000:
                  return (base * 0.2 - 555) * work_age
              if base &gt;= 9000 and base &lt; 35000:
                  return (base * 0.25 - 1005) * work_age
              if base &gt;= 35000 and base &lt; 55000:
                  return (base * 0.3 - 2755) * work_age
              if base &gt;= 55000 and base &lt; 80000:
                  return (base * 0.35 - 5505) * work_age
              if base &gt;= 80000:
                  return (base * 0.45 - 13505) * work_age
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;根据工龄计算离职补偿金&lt;/p&gt;
              &lt;p&gt;格式: 离职补偿(离职补偿金, 市场平均工资, 累计工龄)&lt;/p&gt;
              &lt;p&gt;返回: 离职补偿金个税&lt;/p&gt;
          </field>
      </record>


      <record model="hr.payroll.function" id="F_GetDaysof">
          <field name="name">指定期段日历日历天数公式</field>
          <field name="code">F_GetDaysof</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="pre_cal" eval="True"/>
          <field name="category">时间公式</field>
          <field name="python_code">def F_GetDaysof(BeginDate, EndDate, DayType):
              payslip_var = pool.get('hr.payslip.run').browse(cr, uid, payslip_run_id)
              calendar_var = payslip_var.payroll_group_id.work_calendar_id
              workday_date = [i.day for i in calendar_var.work_calendar_lines if i.day_type == 'work']
              holiday_date = [i.day for i in calendar_var.work_calendar_lines if i.day_type == 'holiday']
              lower_date = datetime.strptime(BeginDate, '%Y-%m-%d')
              upper_date = datetime.strptime(EndDate, '%Y-%m-%d')
              if DayType == 1:
                  return (upper_date - lower_date).days
              if DayType == 2:
                  minus = 0
                  difference = upper_date - lower_date
                  for i in range(difference.days + 1):
                      temp = lower_date + timedelta(days=i)
                      if temp.weekday() == 5 or temp.weekday() == 6:
                          temp_str = temp.strftime('%Y-%m-%d')
                          if temp_str not in workday_date and temp_str not in holiday_date:
                              minus += 1
                  return (upper_date - lower_date).days - len(holiday_date) - minus
              if DayType == 3:
                  count = 0
                  for day in holiday_date:
                      if day &gt;= BeginDate and day &lt;= EndDate:
                          count += 1
                  return count
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;函数目标：获取指定期段的指定类型的天数&lt;/p&gt;
              &lt;p&gt;输入参数：&lt;/p&gt;
              &lt;p&gt;起始日：日期字符串，格式: "2222-01-01"&lt;/p&gt;
              &lt;p&gt;结束日：日期字符串, 格式: "2222-01-01"&lt;/p&gt;
              &lt;p&gt;取值类型：1-日历日天数，2-工作日天数（不含周末），3-法定节假日天数&lt;/p&gt;
              &lt;p&gt;输出：数值型&lt;/p&gt;
              &lt;p&gt;取值逻辑：从员工对应的日历中，统计指定期段中指定类型的天数，注意需要包含这里的起始日和结束日。&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_IsNew">
          <field name="name">是否本月入职公式</field>
          <field name="code">F_IsNew</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="pre_cal" eval="True"/>
          <field name="category">时间公式</field>
          <field name="python_code">def F_IsNew():
              period_var = pool.get('hr.payslip.run').browse(cr, uid, payslip_run_id).payroll_period
              employee_var = pool.get('hr.employee').browse(cr, uid, employee_id)
              if employee_var.hiredate &lt; period_var.date_end:
                  return True
              else:
                  return False
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;函数目标：判断员工是否为当前薪资月或考勤月中新入职员工&lt;/p&gt;
              &lt;p&gt;输入参数：无&lt;/p&gt;
              &lt;p&gt;输出：根据所选周期类型的当前周期的起始日期和结束日期判断, 如果入职日期在当前周期内的，返回真True, 否则返回假False。&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_IsTerminated">
          <field name="name">是否本月离职公式</field>
          <field name="code">F_IsTerminated</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="pre_cal" eval="True"/>
          <field name="category">时间公式</field>
          <field name="python_code">def F_IsTerminated():
              period_var = pool.get('hr.payslip.run').browse(cr, uid, payslip_run_id).payroll_period
              employee_var = pool.get('hr.employee').browse(cr, uid, employee_id)
              if not employee_var.departure_time:
                  return False
              if employee_var.departure_time &lt; period_var.date_end and employee_var.departure_time &gt;= period_var.date_start:
                  return True
              else:
                  return False
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;函数目标：判断员工是否为当前薪资月或考勤月中离职员工&lt;/p&gt;
              &lt;p&gt;输入参数：无&lt;/p&gt;
              &lt;p&gt;输出：根据所选周期类型的当前周期的起始日期和结束日期判断, 如果离职日期在当前周期内的，返回真True, 否则返回假False。&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_YOS">
          <field name="name">离职补偿服务年限公式</field>
          <field name="code">F_YOS</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="pre_cal" eval="True"/>
          <field name="category">时间公式</field>
          <field name="python_code">def F_YOS():
              employee_var = pool.get('hr.employee').browse(cr, uid, employee_id)
              if not employee_var.departure_time:
                  return 0
              if not employee_var.social_working_age_adjustment:
                  adjustment = 0
              else:
                  adjustment = employee_var.social_working_age_adjustment
              entry_date = datetime.strptime(employee_var.hiredate, '%Y-%m-%d')
              leave_date = datetime.strptime(employee_var.departure_time, '%Y-%m-%d')
              difference = (leave_date - entry_date).days
              return difference / 365 + adjustment
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;函数目标：计算离职员工的服务年限&lt;/p&gt;
              &lt;p&gt;输入参数：无&lt;/p&gt;
              &lt;p&gt;输出：根据参数按以下算法给出计算结果，返回数值&lt;/p&gt;
              &lt;p&gt;(离职日- 入职日)/365+ 公司工龄调整&lt;/p&gt;
              &lt;p&gt;算法：&lt;/p&gt;
              &lt;p&gt;如果离职日期不为空，则取出(离职日- 入职日)/365+ 公司工龄调整，否则：0&lt;/p&gt;
              &lt;p&gt;返回数值保留高精度.用户可在薪资项中引用该函数自定义精度控制方式.&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_GetNewHireDays">
          <field name="name">入职折算天数公式</field>
          <field name="code">F_GetNewHireDays</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">时间公式</field>
          <field name="pre_cal" eval="True"/>
          <field name="python_code">def F_GetNewHireDays():
              payslip_var = pool.get('hr.payslip.run').browse(cr, uid, payslip_run_id)
              calendar_var = payslip_var.payroll_group_id.work_calendar_id
              workday_date = [i.day for i in calendar_var.work_calendar_lines if i.day_type == 'work']
              holiday_date = [i.day for i in calendar_var.work_calendar_lines if i.day_type == 'holiday']
              employee_var = pool.get('hr.employee').browse(cr, uid, employee_id)
              upper_date = datetime.strptime(payslip_var.date_end, '%Y-%m-%d')
              lower_date = datetime.strptime(employee_var.hiredate, '%Y-%m-%d')
              difference = upper_date - lower_date
              minus = 0

              for i in range(difference.days + 1):
                  temp = lower_date + timedelta(days=i)
                  if temp.weekday() == 5 or temp.weekday() == 6:
                      temp_str = temp.strftime('%Y-%m-%d')
                      if temp_str not in workday_date and temp_str not in holiday_date:
                          minus += 1
              return difference.days - len(holiday_date) - minus

          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;输入：缺勤天数&lt;/p&gt;
              &lt;p&gt;输出：入职当月工作日天数&lt;/p&gt;
              &lt;p&gt;计算逻辑：工作日天数 - 缺勤天数
              &lt;p&gt;工作日天数：员工入职日期（含）至当前薪资周期结束日的天数减去该时间段的周末和法定节假日；&lt;/p&gt;
              &lt;p&gt;缺勤天数：当前薪资周期开始日至入职日期日（不含）的天数减去该时间段的周末和法定节假日。&lt;/p&gt;
              &lt;p&gt;备注：该缺勤天数的含义不包括考勤的请休假。&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_GetCalendarDays">
          <field name="name">获取日历天数公式</field>
          <field name="code">F_GetCalendarDays</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">时间公式</field>
          <field name="pre_cal" eval="True"/>
          <field name="python_code">def F_GetCalendarDays(period_type, month_type, value_type):
              payslip_var = pool.get('hr.payslip.run').browse(cr, uid, payslip_run_id)
              calendar_var = payslip_var.payroll_group_id.work_calendar_id
              holiday_data = [i.day for i in calendar_var.work_calendar_lines if i.day &lt;= payslip_var.date_end and i.day &gt;= payslip_var.date_start and i.day_type == 'holiday']
              workday_data = [i.day for i in calendar_var.work_calendar_lines if i.day &lt;= payslip_var.date_end and i.day &gt;= payslip_var.date_start and i.day_type == 'work']
              employee_var = pool.get('hr.employee').browse(cr, uid, employee_id)
              upper_date = datetime.strptime(payslip_var.date_end, '%Y-%m-%d')
              lower_date = datetime.strptime(employee_var.hiredate, '%Y-%m-%d')
              if value_type == 1:
                  count = (upper_date - lower_date).days
                  return count
              if value_type == 2:
                  count = (upper_date - lower_date).days
                  if lower_date.weekday == 5 or lower_date.weekday == 6:
                      count = count - 1
                  while True:
                      lower_date = lower_date + timedelta(days=1)
                      if lower_date > upper_date:
                          break
                      if lower_date.weekday == 5 or lower_date.weekday == 6:
                          count = count -1
                  return count
              if value_type == 3:
                  return len(holiday_data)
              
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;函数目标：获取员工在指定月或当前月的日历日天数、或法定节假日天数、或周末天数&lt;/p&gt;
              &lt;p&gt;输入参数：周期类型，指定月类型，取值类型&lt;/p&gt;
              &lt;p&gt;周期类型：1-薪资周期，2-考勤周期&lt;/p&gt;
              &lt;p&gt;指定月类型：1-当前月，2-上个月。&lt;/p&gt;
              &lt;p&gt;取值类型：1-日历日天数，2-工作日天数，3-法定假日天数&lt;/p&gt;
              &lt;p&gt;输出：数值型&lt;/p&gt;
              &lt;p&gt;取值逻辑：从员工对应的日历中，统计指定周期中指定类型的天数，工作日天数＝历日历天数－法定假日天数－周末天数－请假合计天数&lt;/p&gt;
              &lt;p&gt;应用场景：&lt;/p&gt;
              &lt;p&gt;如计算【当月日工资=当月基本工资/当月日历日天数】时，分母可以调用该函数&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="function_inverse_tax">
          <field name="name">个税倒算税公式</field>
          <field name="code">func_inverse_tax</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def func_inverse_tax(after_tax):
              #参数解释: after_tax->税后金额
              #返回: 根据税金倒算出税前

              return max([(after_tax-3500)+3500, (after_tax-3500)/(1-0.03)+3500, (after_tax-3500-105)/(1-0.1)+3500, (after_tax-3500-555)/(1-0.2)+3500, (after_tax-3500-1005)/(1-0.25)+3500, (after_tax-3500-2755)/(1-0.3)+3500, (after_tax-3500-5505)/(1-0.35)+3500, (after_tax-3500-13505)/(1-0.45)+3500])
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;根据税后金额(税前-税金)倒推出税前金额&lt;/p&gt;
              &lt;p&gt;格式: 个税倒算税(税后金额)&lt;/p&gt;
              &lt;p&gt;返回: 税前金额&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="function_income_tax_round">
          <field name="name">个税一元税公式</field>
          <field name="code">func_income_tax_round</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def func_income_tax_round(taxable_salary):
              #参数解释: taxable_salary-计税工资，若税金小于1， 返回0
              if taxable_salary &lt;= 3500:
                  return 0
              else:
                  res = 0
                  base = taxable_salary - 3500
                  if base &lt; 1500:
                      res = base*0.03
                  elif base &gt;= 1500 and base &lt; 4500:
                      res = base*0.1 - 105
                  elif base &gt;= 4500 and base &lt; 9000:
                      res = base * 0.2 - 555
                  elif base &gt;= 9000 and base &lt; 35000:
                      res = base * 0.25 - 1005
                  elif base &gt;= 35000 and base &lt; 55000:
                      res = base * 0.3 - 2755
                  elif base &gt;= 55000 and base &lt; 80000:
                      res = base * 0.35 - 5505
                  elif base &gt;= 80000:
                      res = base * 0.45 - 13505

                  if res &lt; 1:
                      return 0
                  else:
                      return res
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;一元所得税公式&lt;/p&gt;
              &lt;p&gt;格式: 个税一元税(税前工资)&lt;/p&gt;
              &lt;p&gt;返回: 个人所得税税金, 若税金小于1元则返回0&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="IIT_flow_before_tax_normal">
          <field name="name">累计正算税前公式</field>
          <field name="code">IIT_flow_before_tax_normal</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def IIT_flow_before_tax_normal(data):
              try:
                  result = data + before_tax_normal
              except:
                  result = data
              return result
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;用于多批次计算时的税务处理, 主要用于储存税务由员工承担的税前金额&lt;/p&gt;
              &lt;p&gt;格式: 累计正算税前(税前金额)&lt;/p&gt;
              &lt;p&gt;返回: 从数据库中读取期间历史累计正算税前 ＋ 当批次正算税前&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="IIT_flow_tax_normal">
          <field name="name">累计正算税金公式</field>
          <field name="code">IIT_flow_tax_normal</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def IIT_flow_tax_normal(data):
              try:
                  result = data + tax_normal
              except:
                  result = data
              return result
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;用于多批次计算时的税务处理, 主要用于储存税务由员工承担的税金&lt;/p&gt;
              &lt;p&gt;格式: 累计正算税金(金额)&lt;/p&gt;
              &lt;p&gt;返回: 例如参数金额=0, 表示从数据库中读取期间历史累计正算税金(不包含当前批次)&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="IIT_flow_before_tax_reverse">
          <field name="name">累计倒算税前公式</field>
          <field name="code">IIT_flow_before_tax_reverse</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def IIT_flow_before_tax_reverse(data):
              try:
                  result = data + before_tax_reverse
              except:
                  result = data
              return result
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;用于多批次计算时的税务处理, 主要用于储存税务由企业承担的税前金额&lt;/p&gt;
              &lt;p&gt;格式: 累计倒算税前(税前金额)&lt;/p&gt;
              &lt;p&gt;返回: 从数据库中读取期间历史累计倒算税前 ＋ 当批次倒算税前&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="IIT_flow_before_tax_total">
          <field name="name">累计税前公式</field>
          <field name="code">IIT_flow_before_tax_total</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def IIT_flow_before_tax_total(data):
              try:
                  result = data + before_tax_total
              except:
                  result = data
              return result
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;用于多批次计算时的税务处理, 主要用于储存员工和企业承担的税前金额。若薪资项部分由员工承担，部分由企业承担，则累计税前通过倒推得出&lt;/p&gt;
              &lt;p&gt;格式: 累计税前(金额)&lt;/p&gt;
              &lt;p&gt;返回: 例如参数金额=0, 表示从数据库中读取期间历史累计税前(不包含当前批次)&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="IIT_flow_tax_total">
          <field name="name">累计总税金公式</field>
          <field name="code">IIT_flow_tax_total</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def IIT_flow_tax_total(data):
              try:
                  result = data + tax_total
              except:
                  result = data
              return result
          </field>
          <field name="value_type">float</field>
          <field name="note">
              &lt;p&gt;用于多批次计算时的税务处理, 计算总的税金，包含员工和企业各自承担的部分&lt;/p&gt;
              &lt;p&gt;格式: 累计总税金(金额)&lt;/p&gt;
              &lt;p&gt;返回: 例如参数金额=0, 则表示从数据库中读取期间历史累计总税金(不包含当前批次)&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="IIT_flow_tax_reverse">
          <field name="name">累计倒算税金公式</field>
          <field name="code">IIT_flow_tax_reverse</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="category">税务公式</field>
          <field name="python_code">def IIT_flow_tax_reverse(data):
              try:
                  result = data + tax_reverse
              except:
                  result = data
              return result
          </field>
          <field name="value_type">float</field>
           <field name="note">
               &lt;p&gt;用于多批次计算时的税务处理, 计算企业承担的税金&lt;/p&gt;
               &lt;p&gt;格式: 累计倒算税金(金额)&lt;/p&gt;
              &lt;p&gt;返回: 例如参数金额=0, 表示从数据库中读取期间历史累计倒算税金(不包含当前批次)&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_SumLeave">
          <field name="name">获取休假时间</field>
          <field name="code">F_SumLeave</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="pre_cal" eval="True"/>
          <field name="category">时间公式</field>
          <field name="python_code">def F_SumLeave(LeaveType):
               employee = pool.get('hr.employee').browse(cr, uid, employee_id)
               employee_code = employee.employee_number
               payslip_var = pool.get('hr.payslip.run').browse(cr, uid, payslip_run_id)
               period_id = payslip_var.payroll_period.id
               search_domain = [('leave_type_code', '=', LeaveType),('employee_code', '=', employee_code),('payroll_period', '=', period_id)]
               attendance_id = pool.get('attendance.submit.line').search(cr, uid, search_domain)
               attendance_item = pool.get('attendance.submit.line').browse(cr,uid,attendance_id)
               holiday_allot_count = attendance_item.allot_count
               return holiday_allot_count
          </field>
          <field name="value_type">float</field>
           <field name="note">
               &lt;p&gt;获取当前薪资周期的指定假期类型的休假时间&lt;/p&gt;
               &lt;p&gt;假期类型:仅限于输入休假类型列表中休假的假期编号.如L001-年假,L002-病假&lt;/p&gt;
              &lt;p&gt;返回: 按指定假期类型的员工休假时间（返回小时数)&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_SumOT">
          <field name="name">获取加班时间</field>
          <field name="code">F_SumOT</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="pre_cal" eval="True"/>
          <field name="category">时间公式</field>
          <field name="python_code">def F_SumOT(OverTimeType):
               employee = pool.get('hr.employee').browse(cr, uid, employee_id)
               employee_code = employee.employee_number
               payslip_var = pool.get('hr.payslip.run').browse(cr, uid, payslip_run_id)
               period_id = payslip_var.payroll_period.id
               search_domain = [('overtime_type_code', '=', OverTimeType),('employee_code', '=', employee_code),('payroll_period', '=', period_id)]
               attendance_id = pool.get('attendance.submit.line').search(cr, uid, search_domain)
               attendance_item = pool.get('attendance.submit.line').browse(cr,uid,attendance_id)
               overtime_hour = attendance_item.total_hours
               return overtime_hour
          </field>
          <field name="value_type">float</field>
           <field name="note">
               &lt;p&gt;获取当前薪资周期的指定加班类型的加班时间&lt;/p&gt;
               &lt;p&gt;加班类型:仅限于输入加班类型列表中的加班编号,如OTTYPE12958432-休息日加班&lt;/p&gt;
              &lt;p&gt;返回: 按指定加班类型的员工加班时间（返回小时数)&lt;/p&gt;
          </field>
      </record>

      <record model="hr.payroll.function" id="F_SumAttendance">
          <field name="name">获取考勤异常数据</field>
          <field name="code">F_SumAttendance</field>
          <field name="type">self_defined</field>
          <field name="sequence">6</field>
          <field name="pre_cal" eval="True"/>
          <field name="category">时间公式</field>
          <field name="python_code">def F_SumAttendance(AttendanceType):
               employee = pool.get('hr.employee').browse(cr, uid, employee_id)
               employee_code = employee.employee_number
               payslip_var = pool.get('hr.payslip.run').browse(cr, uid, payslip_run_id)
               period_id = payslip_var.payroll_period.id
               search_domain = [('abnormality_type_code', '=', AttendanceType),('employee_code', '=', employee_code),('payroll_period', '=', period_id)]
               attendance_id = pool.get('attendance.submit.line').search(cr, uid, search_domain)
               attendance_item = pool.get('attendance.submit.line').browse(cr,uid,attendance_id)
               abnormality_times = attendance_item.abnormality_times
               return abnormality_times
          </field>
          <field name="value_type">float</field>
           <field name="note">
               &lt;p&gt;获取当前薪资周期的指定考勤异常类型的总次数&lt;/p&gt;
               &lt;p&gt;考勤异常类型：later-迟到，leave_early-早退，not_sign-未打卡等&lt;/p&gt;
              &lt;p&gt;返回:异常次数，整数&lt;/p&gt;
          </field>
      </record>
  </data>

</openerp>